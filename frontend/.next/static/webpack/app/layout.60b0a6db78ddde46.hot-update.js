"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/hooks/useNotifications.tsx":
/*!****************************************!*\
  !*** ./src/hooks/useNotifications.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationsProvider: function() { return /* binding */ NotificationsProvider; },\n/* harmony export */   useNotifications: function() { return /* binding */ useNotifications; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _useWebSocket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useWebSocket */ \"(app-pages-browser)/./src/hooks/useWebSocket.ts\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n/* harmony import */ var _notificationUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notificationUtils */ \"(app-pages-browser)/./src/hooks/notificationUtils.ts\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./src/lib/utils.ts\");\n/* __next_internal_client_entry_do_not_use__ NotificationsProvider,useNotifications,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n// Use the root API URL and include the /api prefix on each request so\n// paths match the FastAPI router mounted with prefix=\"/api\".\n// All REST requests use the v1 prefix so calls line up with the backend router\n// mounted at /api/v1.\nconst api = axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].create({\n    baseURL: \"http://localhost:8000\" + \"/api/v1\",\n    withCredentials: true\n});\nlet currentToken = null;\napi.interceptors.request.use((config)=>{\n    if (currentToken) {\n        config.headers = {\n            ...config.headers,\n            Authorization: \"Bearer \".concat(currentToken)\n        };\n    }\n    return config;\n});\nconst NotificationsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction NotificationsProvider(param) {\n    let { children } = param;\n    _s();\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [unreadCount, setUnreadCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [hasMore, setHasMore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { token } = (0,_contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth)();\n    const tokenRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(token);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        tokenRef.current = token;\n        currentToken = token;\n    }, [\n        token\n    ]);\n    const fetchNotifications = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        setLoading(true);\n        try {\n            const res = await api.get(\"/notifications\", {\n                params: {\n                    limit: 20,\n                    unreadOnly: false\n                }\n            });\n            setNotifications(res.data);\n            setUnreadCount(res.data.filter((n)=>!n.is_read).length);\n            setHasMore(res.data.length === 20);\n            setError(null);\n        } catch (err) {\n            console.error(\"Failed to load notifications:\", err);\n            const msg = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_6__.authAwareMessage)(err, \"Failed to load notifications. Please try again later.\", \"Failed to load notifications. Please log in to view your notifications.\");\n            setError(new Error(msg));\n        } finally{\n            setLoading(false);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!tokenRef.current) return;\n        fetchNotifications();\n        const id = setInterval(fetchNotifications, 30000);\n        return ()=>clearInterval(id);\n    }, [\n        fetchNotifications,\n        token\n    ]);\n    // Build the WebSocket URL including the API prefix so it matches\n    // the FastAPI router mounted at `/api/v1`.\n    const wsHost = \"ws://localhost:8000\" || 0;\n    const wsUrl = token ? \"\".concat(wsHost, \"/api/v1/ws/notifications?token=\").concat(encodeURIComponent(token)) : null;\n    const { send, onMessage } = (0,_useWebSocket__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(wsUrl);\n    const handleMessage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        try {\n            const data = JSON.parse(event.data);\n            if (data.type === \"ping\") {\n                send(JSON.stringify({\n                    type: \"pong\"\n                }));\n                return;\n            }\n            if (data.type === \"reconnect\") {\n                return;\n            }\n            if (!data.id || !data.timestamp) {\n                return;\n            }\n            const newNotif = {\n                ...data,\n                is_read: false\n            };\n            setNotifications((prev)=>[\n                    newNotif,\n                    ...prev\n                ]);\n            setUnreadCount((c)=>c + 1);\n        } catch (e) {\n            console.error(\"Failed to parse notification message\", e);\n        }\n    }, [\n        send\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>onMessage(handleMessage), [\n        onMessage,\n        handleMessage\n    ]);\n    const markAsRead = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (id)=>{\n        // 1) optimistic update\n        setNotifications((ns)=>ns.map((n)=>n.id === id ? {\n                    ...n,\n                    is_read: true\n                } : n));\n        setUnreadCount((c)=>Math.max(0, c - 1));\n        try {\n            await api.put(\"/notifications/\".concat(id, \"/read\"));\n        } catch (err) {\n            // rollback\n            setNotifications((ns)=>ns.map((n)=>n.id === id ? {\n                        ...n,\n                        is_read: false\n                    } : n));\n            setUnreadCount((c)=>c + 1);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error((0,_lib_utils__WEBPACK_IMPORTED_MODULE_6__.authAwareMessage)(err, \"Failed to mark notification read\", \"Failed to mark notification read. Please log in to continue.\"));\n        }\n    }, []);\n    const markAllAsRead = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        const prev = notifications;\n        const prevCount = unreadCount;\n        setNotifications((p)=>p.map((n)=>({\n                    ...n,\n                    is_read: true\n                })));\n        setUnreadCount(0);\n        try {\n            await api.put(\"/notifications/read-all\");\n        } catch (err) {\n            setNotifications(prev);\n            setUnreadCount(prevCount);\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_2__[\"default\"].error((0,_lib_utils__WEBPACK_IMPORTED_MODULE_6__.authAwareMessage)(err, \"Failed to mark notifications read\", \"Failed to mark notifications read. Please log in to continue.\"));\n        }\n    }, [\n        notifications,\n        unreadCount\n    ]);\n    const deleteNotification = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (id)=>{\n        try {\n            await api.delete(\"/notifications/\".concat(id));\n            setNotifications((prev)=>prev.filter((n)=>n.id !== id));\n            setUnreadCount((c)=>Math.max(0, c - 1));\n        } catch (err) {\n            console.error(\"Failed to delete notification:\", err);\n            const msg = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_6__.authAwareMessage)(err, \"Failed to delete notification.\", \"Failed to delete notification. Please log in to continue.\");\n            setError(new Error(msg));\n        }\n    }, []);\n    const loadMore = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        try {\n            const res = await api.get(\"/notifications\", {\n                params: {\n                    skip: notifications.length,\n                    limit: 20,\n                    unreadOnly: false\n                }\n            });\n            setNotifications((prev)=>[\n                    ...prev,\n                    ...res.data\n                ]);\n            setHasMore(res.data.length === 20);\n            setError(null);\n        } catch (err) {\n            console.error(\"Failed to load more notifications:\", err);\n            const msg = (0,_lib_utils__WEBPACK_IMPORTED_MODULE_6__.authAwareMessage)(err, \"Failed to load more notifications. Please try again later.\", \"Failed to load notifications. Please log in to view your notifications.\");\n            setError(new Error(msg));\n        }\n    }, [\n        notifications.length\n    ]);\n    const unifiedItems = notifications.map(_notificationUtils__WEBPACK_IMPORTED_MODULE_5__.toUnifiedFromNotification);\n    const value = {\n        notifications,\n        unreadCount,\n        loading,\n        error,\n        markAsRead,\n        markAllAsRead,\n        deleteNotification,\n        // legacy compatibility\n        items: unifiedItems,\n        markItem: (n)=>n.id ? markAsRead(n.id) : Promise.resolve(),\n        markAll: markAllAsRead,\n        loadMore,\n        hasMore\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NotificationsContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/macbookair/Documents/Cursor/booking-app/frontend/src/hooks/useNotifications.tsx\",\n        lineNumber: 246,\n        columnNumber: 5\n    }, this);\n}\n_s(NotificationsProvider, \"VWeuF07UJS4PQG5y39BUyFJzgsI=\", false, function() {\n    return [\n        _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_4__.useAuth,\n        _useWebSocket__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    ];\n});\n_c = NotificationsProvider;\nfunction useNotifications() {\n    _s1();\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(NotificationsContext);\n    if (!ctx) {\n        return {\n            notifications: [],\n            unreadCount: 0,\n            loading: false,\n            error: null,\n            markAsRead: async ()=>{},\n            markAllAsRead: async ()=>{},\n            deleteNotification: async ()=>{},\n            items: [],\n            markItem: async ()=>{},\n            markAll: async ()=>{},\n            loadMore: async ()=>{},\n            hasMore: false\n        };\n    }\n    return ctx;\n}\n_s1(useNotifications, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n/* harmony default export */ __webpack_exports__[\"default\"] = (useNotifications);\nvar _c;\n$RefreshReg$(_c, \"NotificationsProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useNotifications.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptQuoteV2: function() { return /* binding */ acceptQuoteV2; },\n/* harmony export */   addEventPrepAttachment: function() { return /* binding */ addEventPrepAttachment; },\n/* harmony export */   addMessageReaction: function() { return /* binding */ addMessageReaction; },\n/* harmony export */   calculateQuote: function() { return /* binding */ calculateQuote; },\n/* harmony export */   calculateQuoteBreakdown: function() { return /* binding */ calculateQuoteBreakdown; },\n/* harmony export */   clearQuoteCache: function() { return /* binding */ clearQuoteCache; },\n/* harmony export */   completeEventPrepTask: function() { return /* binding */ completeEventPrepTask; },\n/* harmony export */   confirmEmail: function() { return /* binding */ confirmEmail; },\n/* harmony export */   confirmMfa: function() { return /* binding */ confirmMfa; },\n/* harmony export */   confirmQuoteBooking: function() { return /* binding */ confirmQuoteBooking; },\n/* harmony export */   connectGoogleCalendar: function() { return /* binding */ connectGoogleCalendar; },\n/* harmony export */   createBooking: function() { return /* binding */ createBooking; },\n/* harmony export */   createBookingRequest: function() { return /* binding */ createBookingRequest; },\n/* harmony export */   createPayment: function() { return /* binding */ createPayment; },\n/* harmony export */   createQuoteForRequest: function() { return /* binding */ createQuoteForRequest; },\n/* harmony export */   createQuoteTemplate: function() { return /* binding */ createQuoteTemplate; },\n/* harmony export */   createQuoteV2: function() { return /* binding */ createQuoteV2; },\n/* harmony export */   createReviewForBooking: function() { return /* binding */ createReviewForBooking; },\n/* harmony export */   createService: function() { return /* binding */ createService; },\n/* harmony export */   declineQuoteV2: function() { return /* binding */ declineQuoteV2; },\n/* harmony export */   deleteEventPrepAttachment: function() { return /* binding */ deleteEventPrepAttachment; },\n/* harmony export */   deleteMessageForBookingRequest: function() { return /* binding */ deleteMessageForBookingRequest; },\n/* harmony export */   deleteMyAccount: function() { return /* binding */ deleteMyAccount; },\n/* harmony export */   deleteQuoteTemplate: function() { return /* binding */ deleteQuoteTemplate; },\n/* harmony export */   deleteService: function() { return /* binding */ deleteService; },\n/* harmony export */   disableMfa: function() { return /* binding */ disableMfa; },\n/* harmony export */   disconnectGoogleCalendar: function() { return /* binding */ disconnectGoogleCalendar; },\n/* harmony export */   downloadBookingIcs: function() { return /* binding */ downloadBookingIcs; },\n/* harmony export */   downloadQuotePdf: function() { return /* binding */ downloadQuotePdf; },\n/* harmony export */   exportMyAccount: function() { return /* binding */ exportMyAccount; },\n/* harmony export */   generateRecoveryCodes: function() { return /* binding */ generateRecoveryCodes; },\n/* harmony export */   getAllServices: function() { return /* binding */ getAllServices; },\n/* harmony export */   getBookingDetails: function() { return /* binding */ getBookingDetails; },\n/* harmony export */   getBookingRequestById: function() { return /* binding */ getBookingRequestById; },\n/* harmony export */   getBookingRequestsForArtist: function() { return /* binding */ getBookingRequestsForArtist; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   getDashboardStats: function() { return /* binding */ getDashboardStats; },\n/* harmony export */   getEventPrep: function() { return /* binding */ getEventPrep; },\n/* harmony export */   getEventPrepAttachments: function() { return /* binding */ getEventPrepAttachments; },\n/* harmony export */   getGoogleCalendarStatus: function() { return /* binding */ getGoogleCalendarStatus; },\n/* harmony export */   getMessageThreads: function() { return /* binding */ getMessageThreads; },\n/* harmony export */   getMessageThreadsPreview: function() { return /* binding */ getMessageThreadsPreview; },\n/* harmony export */   getMessagesForBookingRequest: function() { return /* binding */ getMessagesForBookingRequest; },\n/* harmony export */   getMyArtistBookings: function() { return /* binding */ getMyArtistBookings; },\n/* harmony export */   getMyArtistQuotes: function() { return /* binding */ getMyArtistQuotes; },\n/* harmony export */   getMyBookingRequests: function() { return /* binding */ getMyBookingRequests; },\n/* harmony export */   getMyClientBookings: function() { return /* binding */ getMyClientBookings; },\n/* harmony export */   getMyClientQuotes: function() { return /* binding */ getMyClientQuotes; },\n/* harmony export */   getNotifications: function() { return /* binding */ getNotifications; },\n/* harmony export */   getParsedBooking: function() { return /* binding */ getParsedBooking; },\n/* harmony export */   getQuoteTemplates: function() { return /* binding */ getQuoteTemplates; },\n/* harmony export */   getQuoteV2: function() { return /* binding */ getQuoteV2; },\n/* harmony export */   getQuotesForBookingRequest: function() { return /* binding */ getQuotesForBookingRequest; },\n/* harmony export */   getReview: function() { return /* binding */ getReview; },\n/* harmony export */   getRider: function() { return /* binding */ getRider; },\n/* harmony export */   getService: function() { return /* binding */ getService; },\n/* harmony export */   getServiceCategories: function() { return /* binding */ getServiceCategories; },\n/* harmony export */   getServiceProvider: function() { return /* binding */ getServiceProvider; },\n/* harmony export */   getServiceProviderAvailability: function() { return /* binding */ getServiceProviderAvailability; },\n/* harmony export */   getServiceProviderProfileMe: function() { return /* binding */ getServiceProviderProfileMe; },\n/* harmony export */   getServiceProviderReviews: function() { return /* binding */ getServiceProviderReviews; },\n/* harmony export */   getServiceProviderServices: function() { return /* binding */ getServiceProviderServices; },\n/* harmony export */   getServiceProviders: function() { return /* binding */ getServiceProviders; },\n/* harmony export */   getServiceReviews: function() { return /* binding */ getServiceReviews; },\n/* harmony export */   getSoundOutreach: function() { return /* binding */ getSoundOutreach; },\n/* harmony export */   kickoffSoundOutreach: function() { return /* binding */ kickoffSoundOutreach; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   markAllNotificationsRead: function() { return /* binding */ markAllNotificationsRead; },\n/* harmony export */   markMessagesRead: function() { return /* binding */ markMessagesRead; },\n/* harmony export */   markNotificationRead: function() { return /* binding */ markNotificationRead; },\n/* harmony export */   markThreadRead: function() { return /* binding */ markThreadRead; },\n/* harmony export */   parseBookingText: function() { return /* binding */ parseBookingText; },\n/* harmony export */   postMessageToBookingRequest: function() { return /* binding */ postMessageToBookingRequest; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   removeMessageReaction: function() { return /* binding */ removeMessageReaction; },\n/* harmony export */   retrySoundOutreach: function() { return /* binding */ retrySoundOutreach; },\n/* harmony export */   setupMfa: function() { return /* binding */ setupMfa; },\n/* harmony export */   supplierRespondToOutreach: function() { return /* binding */ supplierRespondToOutreach; },\n/* harmony export */   updateBookingRequest: function() { return /* binding */ updateBookingRequest; },\n/* harmony export */   updateBookingRequestArtist: function() { return /* binding */ updateBookingRequestArtist; },\n/* harmony export */   updateBookingStatus: function() { return /* binding */ updateBookingStatus; },\n/* harmony export */   updateEventPrep: function() { return /* binding */ updateEventPrep; },\n/* harmony export */   updateMyServiceProviderPortfolioImageOrder: function() { return /* binding */ updateMyServiceProviderPortfolioImageOrder; },\n/* harmony export */   updateMyServiceProviderProfile: function() { return /* binding */ updateMyServiceProviderProfile; },\n/* harmony export */   updateQuoteAsArtist: function() { return /* binding */ updateQuoteAsArtist; },\n/* harmony export */   updateQuoteAsClient: function() { return /* binding */ updateQuoteAsClient; },\n/* harmony export */   updateQuoteTemplate: function() { return /* binding */ updateQuoteTemplate; },\n/* harmony export */   updateService: function() { return /* binding */ updateService; },\n/* harmony export */   uploadBookingAttachment: function() { return /* binding */ uploadBookingAttachment; },\n/* harmony export */   uploadMessageAttachment: function() { return /* binding */ uploadMessageAttachment; },\n/* harmony export */   uploadMyProfilePicture: function() { return /* binding */ uploadMyProfilePicture; },\n/* harmony export */   uploadMyServiceProviderCoverPhoto: function() { return /* binding */ uploadMyServiceProviderCoverPhoto; },\n/* harmony export */   uploadMyServiceProviderPortfolioImages: function() { return /* binding */ uploadMyServiceProviderPortfolioImages; },\n/* harmony export */   uploadMyServiceProviderProfilePicture: function() { return /* binding */ uploadMyServiceProviderProfilePicture; },\n/* harmony export */   upsertRider: function() { return /* binding */ upsertRider; },\n/* harmony export */   useAuth: function() { return /* reexport safe */ _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__.useAuth; },\n/* harmony export */   verifyMfa: function() { return /* binding */ verifyMfa; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(app-pages-browser)/./src/lib/logger.ts\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./src/lib/utils.ts\");\n/* harmony import */ var _contexts_AuthContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/contexts/AuthContext */ \"(app-pages-browser)/./src/contexts/AuthContext.tsx\");\n// frontend/src/lib/api.ts\n\n\n\n\n // Renamed to avoid conflict with default export 'api'\n// Create a single axios instance for all requests\nconst api = axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create({\n    baseURL: \"http://localhost:8000\" || 0,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Automatically attach the bearer token (if present) to every request\napi.interceptors.request.use((config)=>{\n    _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info({\n        method: config.method,\n        url: config.url\n    }, \"API request\");\n    if (true) {\n        const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n        if (token) {\n            config.headers.Authorization = \"Bearer \".concat(token);\n        } else if (config.headers && \"Authorization\" in config.headers) {\n            delete config.headers.Authorization;\n        }\n    }\n    return config;\n}, (error)=>Promise.reject(error));\n// Provide consistent error messages across the app\napi.interceptors.response.use((response)=>response, (error)=>{\n    if (axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isAxiosError(error)) {\n        var _error_response, _error_response_data, _error_response1;\n        const status = (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status;\n        const detail = (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail;\n        let message = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.extractErrorMessage)(detail);\n        if (status) {\n            const map = {\n                400: \"Bad request. Please verify your input.\",\n                401: \"Authentication required. Please log in.\",\n                403: \"You do not have permission to perform this action.\",\n                404: \"Resource not found.\",\n                422: \"Validation failed. Please check your input.\",\n                500: \"Server error. Please try again later.\"\n            };\n            if (status in map && !(status === 422 && message !== \"An unexpected error occurred.\")) {\n                message = map[status];\n            } else if (message === \"An unexpected error occurred.\") {\n                message = map[status] || message;\n            }\n        } else {\n            message = \"Network error. Please check your connection.\";\n        }\n        _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error({\n            err: error,\n            status,\n            detail\n        }, \"API error\");\n        return Promise.reject(new Error(message));\n    }\n    _logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error({\n        err: error\n    }, \"Unexpected API error\");\n    return Promise.reject(error instanceof Error ? error : new Error(\"An unexpected error occurred.\"));\n});\n// ─── AUTH (no /api/v1 prefix) ───────────────────────────────────────────────────\nconst register = (data)=>api.post(\"/auth/register\", data);\nconst login = (email, password)=>{\n    const params = new URLSearchParams();\n    params.append(\"username\", email);\n    params.append(\"password\", password);\n    return api.post(\"/auth/login\", params, {\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    });\n};\nconst verifyMfa = (token, code)=>api.post(\"/auth/verify-mfa\", {\n        token,\n        code\n    });\nconst setupMfa = ()=>api.post(\"/auth/setup-mfa\");\nconst confirmMfa = (code)=>api.post(\"/auth/confirm-mfa\", {\n        code\n    });\nconst generateRecoveryCodes = ()=>api.post(\"/auth/recovery-codes\");\nconst disableMfa = (code)=>api.post(\"/auth/disable-mfa\", {\n        code\n    });\nconst confirmEmail = (token)=>api.post(\"/auth/confirm-email\", {\n        token\n    });\nconst getCurrentUser = ()=>api.get(\"/auth/me\");\n// ─── All other resources live under /api/v1 ────────────────────────────────────\nconst API_V1 = \"/api/v1\";\n// Helper to ensure API responses always include `user_id` and `id`\nconst normalizeServiceProviderProfile = (profile)=>{\n    var _profile_id;\n    // Ensure 'id' is always a number. Assuming 'profile.id' or 'profile.user_id' can serve as it.\n    const id = (_profile_id = profile.id) !== null && _profile_id !== void 0 ? _profile_id : profile.user_id; // Use user_id as fallback for id\n    var _profile_user_id;\n    const user_id = (_profile_user_id = profile.user_id) !== null && _profile_user_id !== void 0 ? _profile_user_id : profile.id; // Ensure user_id is number\n    return {\n        ...profile,\n        id: id,\n        user_id: user_id,\n        service_categories: profile.service_categories || [],\n        service_price: profile.service_price != null ? parseFloat(profile.service_price) : undefined\n    }; // Cast to ServiceProviderProfile to satisfy the return type, if confident\n};\nconst getServiceProviders = async (params)=>{\n    const { includePriceDistribution, ...rest } = params || {};\n    const query = {\n        ...rest\n    };\n    if (query.when instanceof Date) {\n        query.when = (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(query.when, \"yyyy-MM-dd\");\n    }\n    if (includePriceDistribution) {\n        query.include_price_distribution = true;\n    }\n    const res = await api.get(\"\".concat(API_V1, \"/service-provider-profiles/\"), {\n        params: query\n    });\n    return {\n        ...res.data,\n        data: res.data.data.map(normalizeServiceProviderProfile)\n    };\n};\nconst getServiceProvider = async (userId)=>{\n    const res = await api.get(\"\".concat(API_V1, \"/service-provider-profiles/\").concat(userId));\n    return {\n        ...res,\n        data: normalizeServiceProviderProfile(res.data)\n    };\n};\nconst getServiceProviderAvailability = (serviceProviderId)=>api.get(\"\".concat(API_V1, \"/service-provider-profiles/\").concat(serviceProviderId, \"/availability\"));\nconst getServiceProviderProfileMe = async ()=>{\n    const res = await api.get(\"\".concat(API_V1, \"/service-provider-profiles/me\"));\n    return {\n        ...res,\n        data: normalizeServiceProviderProfile(res.data)\n    };\n};\nconst updateMyServiceProviderProfile = (data)=>api.put(\"\".concat(API_V1, \"/service-provider-profiles/me\"), data);\nconst uploadMyServiceProviderProfilePicture = (file)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return api.post(\"\".concat(API_V1, \"/service-provider-profiles/me/profile-picture\"), formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n};\nconst uploadMyServiceProviderCoverPhoto = (file)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return api.post(\"\".concat(API_V1, \"/service-provider-profiles/me/cover-photo\"), formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n};\nconst uploadMyProfilePicture = (file)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return api.post(\"\".concat(API_V1, \"/users/me/profile-picture\"), formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n};\nconst uploadMyServiceProviderPortfolioImages = (files)=>{\n    const formData = new FormData();\n    files.forEach((f)=>formData.append(\"files\", f));\n    return api.post(\"\".concat(API_V1, \"/service-provider-profiles/me/portfolio-images\"), formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n};\nconst updateMyServiceProviderPortfolioImageOrder = (urls)=>api.put(\"\".concat(API_V1, \"/service-provider-profiles/me/portfolio-images\"), {\n        portfolio_image_urls: urls\n    });\n// ─── SERVICES ──────────────────────────────────────────────────────────────────\n// “services by service provider” is GET /api/v1/services/artist/{artist_user_id}\nconst getServiceProviderServices = (serviceProviderUserId)=>{\n    const id = Number(serviceProviderUserId);\n    return api.get(\"\".concat(API_V1, \"/services/artist/\").concat(id));\n};\nconst getAllServices = ()=>api.get(\"\".concat(API_V1, \"/services/\"));\nconst getService = (serviceId)=>api.get(\"\".concat(API_V1, \"/services/\").concat(serviceId));\n// create / update / delete a service: POST /api/v1/services, PUT /api/v1/services/{id}, DELETE /api/v1/services/{id}\nconst createService = (data)=>api.post(\"\".concat(API_V1, \"/services/\"), data);\nconst updateService = (id, data)=>api.put(\"\".concat(API_V1, \"/services/\").concat(id), data);\nconst deleteService = (id)=>api.delete(\"\".concat(API_V1, \"/services/\").concat(id));\n// ─── BOOKINGS ──────────────────────────────────────────────────────────────────\n// create booking: POST /api/v1/bookings\nconst createBooking = (data)=>api.post(\"\".concat(API_V1, \"/bookings\"), data);\n// client’s bookings: GET /api/v1/bookings/my-bookings\nconst getMyClientBookings = function() {\n    let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return api.get(\"\".concat(API_V1, \"/bookings/my-bookings\"), {\n        params\n    });\n};\n// artist’s bookings: GET /api/v1/bookings/artist-bookings\nconst getMyArtistBookings = ()=>api.get(\"\".concat(API_V1, \"/bookings/artist-bookings\"));\n// read a single booking: GET /api/v1/bookings/{bookingId}\nconst getBookingDetails = (bookingId)=>api.get(\"\".concat(API_V1, \"/bookings/\").concat(bookingId));\n// update status: PATCH /api/v1/bookings/{booking_id}/status\nconst updateBookingStatus = (id, status)=>api.patch(\"\".concat(API_V1, \"/bookings/\").concat(id, \"/status\"), {\n        status\n    });\n// download a confirmed booking's ICS file\nconst downloadBookingIcs = (id)=>api.get(\"\".concat(API_V1, \"/bookings/\").concat(id, \"/calendar.ics\"), {\n        responseType: \"blob\"\n    });\nconst downloadQuotePdf = (id)=>api.get(\"\".concat(API_V1, \"/quotes/\").concat(id, \"/pdf\"), {\n        responseType: \"blob\"\n    });\n// ─── REVIEWS ───────────────────────────────────────────────────────────────────\n// create review for a booking: POST /api/v1/reviews/bookings/{booking_id}/reviews\nconst createReviewForBooking = (bookingId, data)=>api.post(\"\".concat(API_V1, \"/reviews/bookings/\").concat(bookingId, \"/reviews\"), data);\n// read a single review by booking id: GET /api/v1/reviews/{booking_id}\nconst getReview = (bookingId)=>api.get(\"\".concat(API_V1, \"/reviews/\").concat(bookingId));\n// list reviews for a service: GET /api/v1/services/{service_id}/reviews\nconst getServiceReviews = (serviceId)=>api.get(\"\".concat(API_V1, \"/services/\").concat(serviceId, \"/reviews\"));\n// list reviews for a service provider: GET /api/v1/reviews/service-provider-profiles/{service_provider_id}/reviews\nconst getServiceProviderReviews = (serviceProviderUserId)=>api.get(\"\".concat(API_V1, \"/reviews/service-provider-profiles/\").concat(serviceProviderUserId, \"/reviews\"));\n// ─── BOOKING REQUESTS & QUOTES ─────────────────────────────────────────────────\n// Create a new booking request (client → artist):\n//    POST /api/v1/booking-requests/\n// Body must match BookingRequestCreate interface.\nconst createBookingRequest = (data)=>api.post(\"\".concat(API_V1, \"/booking-requests/\"), data);\n// Optionally, if you want to get a list of booking requests (e.g., for a client dashboard):\nconst getMyBookingRequests = ()=>api.get(\"\".concat(API_V1, \"/booking-requests/me/client\"));\n// If the artist needs to fetch requests addressed to them:\nconst getBookingRequestsForArtist = ()=>api.get(\"\".concat(API_V1, \"/booking-requests/me/artist\"));\nconst getDashboardStats = ()=>api.get(\"\".concat(API_V1, \"/booking-requests/stats\"));\n// If you want to fetch a single booking request by ID:\nconst getBookingRequestById = (id)=>api.get(\"\".concat(API_V1, \"/booking-requests/\").concat(id));\n// Update an existing booking request as the client\nconst updateBookingRequest = (id, data)=>api.put(\"\".concat(API_V1, \"/booking-requests/\").concat(id, \"/client\"), data);\n// Update a booking request as the artist (e.g., decline)\nconst updateBookingRequestArtist = (id, data)=>api.put(\"\".concat(API_V1, \"/booking-requests/\").concat(id, \"/artist\"), data);\n// Create a new quote (artist → client) for an existing booking request:\n//    POST /api/v1/quotes/\n// Body must match QuoteCreate interface.\nconst createQuoteForRequest = (requestId, data)=>api.post(\"\".concat(API_V1, \"/booking-requests/\").concat(requestId, \"/quotes\"), data);\n// Optionally, fetch all quotes for a given booking request:\nconst getQuotesForBookingRequest = (bookingRequestId)=>api.get(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/quotes\"));\nconst createQuoteV2 = (data)=>api.post(\"\".concat(API_V1, \"/quotes\"), data);\nconst getQuoteV2 = (quoteId)=>api.get(\"\".concat(API_V1, \"/quotes/\").concat(quoteId));\nconst acceptQuoteV2 = (quoteId, serviceId)=>{\n    const url = serviceId ? \"\".concat(API_V1, \"/quotes/\").concat(quoteId, \"/accept?service_id=\").concat(serviceId) : \"\".concat(API_V1, \"/quotes/\").concat(quoteId, \"/accept\");\n    return api.post(url, {});\n};\nconst declineQuoteV2 = (quoteId)=>api.post(\"\".concat(API_V1, \"/quotes/\").concat(quoteId, \"/decline\"), {});\nconst getMyArtistQuotes = function() {\n    let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return api.get(\"\".concat(API_V1, \"/quotes/me/artist\"), {\n        params\n    });\n};\nconst getMyClientQuotes = function() {\n    let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return api.get(\"\".concat(API_V1, \"/quotes/me/client\"), {\n        params\n    });\n};\nconst updateQuoteAsArtist = (id, data)=>api.put(\"\".concat(API_V1, \"/quotes/\").concat(id, \"/artist\"), data);\nconst updateQuoteAsClient = (id, data)=>api.put(\"\".concat(API_V1, \"/quotes/\").concat(id, \"/client\"), data);\nconst confirmQuoteBooking = (id)=>api.post(\"\".concat(API_V1, \"/quotes/\").concat(id, \"/confirm-booking\"), {});\n// ─── MESSAGES ───────────────────────────────────────────────────────────\nconst getMessagesForBookingRequest = (bookingRequestId)=>api.get(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages\"));\nconst postMessageToBookingRequest = (bookingRequestId, data)=>api.post(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages\"), data);\n// Attempt to delete a message. If the backend doesn't support it, callers should handle errors gracefully.\nconst deleteMessageForBookingRequest = (bookingRequestId, messageId)=>api.delete(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages/\").concat(messageId));\nconst markMessagesRead = (bookingRequestId)=>api.put(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages/read\"));\nconst uploadMessageAttachment = (bookingRequestId, file, onUploadProgress)=>{\n    if (!file || file.size === 0) {\n        return Promise.reject(new Error(\"Attachment file is required\"));\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    return api.post(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/attachments\"), formData, {\n        onUploadProgress,\n        headers: {\n            \"Content-Type\": undefined\n        }\n    });\n};\nconst addMessageReaction = (bookingRequestId, messageId, emoji)=>api.post(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages/\").concat(messageId, \"/reactions\"), {\n        emoji\n    });\nconst removeMessageReaction = (bookingRequestId, messageId, emoji)=>api.delete(\"\".concat(API_V1, \"/booking-requests/\").concat(bookingRequestId, \"/messages/\").concat(messageId, \"/reactions\"), {\n        data: {\n            emoji\n        }\n    });\nconst uploadBookingAttachment = (formData, onUploadProgress)=>api.post(\"\".concat(API_V1, \"/booking-requests/attachments\"), formData, {\n        onUploadProgress,\n        headers: {\n            \"Content-Type\": undefined\n        }\n    });\nconst getParsedBooking = (taskId)=>api.get(\"\".concat(API_V1, \"/booking-requests/parse/\").concat(taskId));\n/**\n * Parse free-form booking text using the NLP service and wait for the result.\n *\n * The backend enqueues the parsing task and returns a `task_id`. This helper\n * handles the follow-up request to retrieve the parsed details so callers can\n * simply await a single promise for the structured data.\n */ const parseBookingText = async (text)=>{\n    const { data } = await api.post(\"\".concat(API_V1, \"/booking-requests/parse\"), {\n        text\n    });\n    return getParsedBooking(data.task_id);\n};\n// ─── QUOTE TEMPLATES ─────────────────────────────────────────────────────────\nconst getQuoteTemplates = async (artistId)=>{\n    const res = await api.get(\"\".concat(API_V1, \"/quote-templates/artist/\").concat(artistId));\n    return {\n        ...res,\n        data: res.data.map(_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeQuoteTemplate)\n    };\n};\nconst createQuoteTemplate = async (data)=>{\n    const res = await api.post(\"\".concat(API_V1, \"/quote-templates\"), data);\n    return {\n        ...res,\n        data: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeQuoteTemplate)(res.data)\n    };\n};\nconst updateQuoteTemplate = (id, data)=>api.put(\"\".concat(API_V1, \"/quote-templates/\").concat(id), data).then((res)=>({\n            ...res,\n            data: (0,_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeQuoteTemplate)(res.data)\n        }));\nconst deleteQuoteTemplate = (id)=>api.delete(\"\".concat(API_V1, \"/quote-templates/\").concat(id));\n// ─── QUOTE CALCULATOR ─────────────────────────────────────────────────────────\nconst calculateQuoteBreakdown = (data)=>api.post(\"\".concat(API_V1, \"/quotes/calculate\"), data);\n// ─── SERVICE CATEGORIES ───────────────────────────────────────────────────────\nconst getServiceCategories = ()=>api.get(\"\".concat(API_V1, \"/service-categories/\"));\nconst QUOTE_CACHE_TTL_MS = 5 * 60 * 1000; // 5 minutes\nconst QUOTE_CACHE_MAX_ENTRIES = 50;\nconst quoteCache = new Map();\nconst clearQuoteCache = ()=>quoteCache.clear();\nconst calculateQuote = async (params)=>{\n    const cacheKey = JSON.stringify(params);\n    const now = Date.now();\n    const cached = quoteCache.get(cacheKey);\n    if (cached && now - cached.timestamp < QUOTE_CACHE_TTL_MS) {\n        // Refresh LRU order by re-inserting the entry.\n        quoteCache.delete(cacheKey);\n        quoteCache.set(cacheKey, {\n            value: cached.value,\n            timestamp: now\n        });\n        return cached.value;\n    }\n    const res = await api.post(\"\".concat(API_V1, \"/quotes/calculate\"), params);\n    quoteCache.set(cacheKey, {\n        value: res.data,\n        timestamp: now\n    });\n    // Enforce max cache size with LRU eviction.\n    if (quoteCache.size > QUOTE_CACHE_MAX_ENTRIES) {\n        const oldestKey = quoteCache.keys().next().value;\n        if (oldestKey) {\n            quoteCache.delete(oldestKey);\n        }\n    }\n    return res.data;\n};\n// ─── PAYMENTS ───────────────────────────────────────────────────────────────\nconst createPayment = (data)=>api.post(\"\".concat(API_V1, \"/payments\"), data);\n// ─── NOTIFICATIONS ───────────────────────────────────────────────────────────\n// Notifications endpoints live under /api/v1\n// ─── SOUND OUTREACH ─────────────────────────────────────────────────────────\nconst kickoffSoundOutreach = (bookingId, data)=>api.post(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/sound/outreach\"), data);\nconst supplierRespondToOutreach = (bookingId, serviceId, data)=>api.post(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/service/\").concat(serviceId, \"/respond\"), data);\nconst getSoundOutreach = (bookingId)=>api.get(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/sound/outreach\"));\nconst retrySoundOutreach = (bookingId, data)=>api.post(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/sound/retry\"), data || {});\nconst API_NOTIFICATIONS = API_V1;\nconst getNotifications = function() {\n    let skip = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n    return api.get(\"\".concat(API_NOTIFICATIONS, \"/notifications?skip=\").concat(skip, \"&limit=\").concat(limit));\n};\nconst markNotificationRead = (id)=>api.put(\"\".concat(API_NOTIFICATIONS, \"/notifications/\").concat(id, \"/read\"));\nconst markAllNotificationsRead = ()=>api.put(\"\".concat(API_NOTIFICATIONS, \"/notifications/read-all\"));\nconst getMessageThreads = ()=>api.get(\"\".concat(API_NOTIFICATIONS, \"/notifications/message-threads\"));\nconst markThreadRead = (bookingRequestId)=>api.put(\"\".concat(API_NOTIFICATIONS, \"/notifications/message-threads/\").concat(bookingRequestId, \"/read\"));\nconst getMessageThreadsPreview = function(role) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    return api.get(\"\".concat(API_V1, \"/message-threads/preview\"), {\n        params: {\n            role,\n            limit\n        }\n    });\n};\n// ─── GOOGLE CALENDAR ─────────────────────────────────────────────────────────\nconst getGoogleCalendarStatus = ()=>api.get(\"\".concat(API_V1, \"/google-calendar/status\"));\nconst connectGoogleCalendar = ()=>api.get(\"\".concat(API_V1, \"/google-calendar/connect\"));\nconst disconnectGoogleCalendar = ()=>api.delete(\"\".concat(API_V1, \"/google-calendar\"));\n// ─── USER ACCOUNT ────────────────────────────────────────────────────────────\nconst exportMyAccount = ()=>api.get(\"\".concat(API_V1, \"/users/me/export\"));\nconst deleteMyAccount = (password)=>api.delete(\"\".concat(API_V1, \"/users/me\"), {\n        data: {\n            password\n        }\n    });\n// ─── EVENT PREP ───────────────────────────────────────────────────────────────\nasync function getEventPrep(bookingId) {\n    const res = await api.get(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep\"));\n    return res.data;\n}\nasync function updateEventPrep(bookingId, patch, opts) {\n    const res = await api.patch(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep\"), patch, (opts === null || opts === void 0 ? void 0 : opts.idempotencyKey) ? {\n        headers: {\n            \"Idempotency-Key\": opts.idempotencyKey\n        }\n    } : undefined);\n    return res.data;\n}\nasync function completeEventPrepTask(bookingId, payload, opts) {\n    const res = await api.post(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep/complete-task\"), payload, (opts === null || opts === void 0 ? void 0 : opts.idempotencyKey) ? {\n        headers: {\n            \"Idempotency-Key\": opts.idempotencyKey\n        }\n    } : undefined);\n    return res.data;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (api); // Export the axios instance as default\n// Re-export useAuth from its original context file if it's there\n// This fixes the 'Function not implemented' warning and potential import conflicts.\n // Re-export as 'useAuth'\nconst getRider = (serviceId)=>api.get(\"\".concat(API_V1, \"/services/\").concat(serviceId, \"/rider\"));\nconst upsertRider = (serviceId, payload)=>api.post(\"\".concat(API_V1, \"/services/\").concat(serviceId, \"/rider\"), {\n        service_id: serviceId,\n        ...payload\n    });\nconst getEventPrepAttachments = (bookingId)=>api.get(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep/attachments\"));\nconst addEventPrepAttachment = (bookingId, url)=>api.post(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep/attachments\"), {\n        url\n    });\nconst deleteEventPrepAttachment = (bookingId, attachmentId)=>api.delete(\"\".concat(API_V1, \"/bookings/\").concat(bookingId, \"/event-prep/attachments/\").concat(attachmentId));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});